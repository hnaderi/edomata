pages = [{"l":"index.html","n":"docs","t":"docs","d":"","k":"static"},
{"l":"edomata/backend.html","n":"edomata.backend","t":"package edomata.backend","d":"edomata/backend","k":"package"},
{"l":"edomata/backend.html","n":"CommandState","t":"type CommandState[S, E, R] = AggregateState[S, E, R] | Redundant.type","d":"edomata/backend","k":"type"},
{"l":"edomata/backend.html","n":"EventVersion","t":"type EventVersion = Long","d":"edomata/backend","k":"type"},
{"l":"edomata/backend.html","n":"PGNamespace","t":"type PGNamespace","d":"edomata/backend","k":"type"},
{"l":"edomata/backend.html","n":"SeqNr","t":"type SeqNr = Long","d":"edomata/backend","k":"type"},
{"l":"edomata/backend.html","n":"SnapshotItem","t":"type SnapshotItem[S] = (StreamId, Valid[S])","d":"edomata/backend","k":"type"},
{"l":"edomata/backend.html","n":"StreamId","t":"type StreamId = String","d":"edomata/backend","k":"type"},
{"l":"edomata/backend/AggregateState.html","n":"AggregateState","t":"enum AggregateState[+S, +E, +R](val isValid: Boolean)","d":"edomata/backend/AggregateState","k":"enum"},
{"l":"edomata/backend/AggregateState$$Valid.html","n":"Valid","t":"case Valid[S](state: S, version: SeqNr) extends AggregateState[S, Nothing, Nothing]","d":"edomata/backend/AggregateState","k":"case"},
{"l":"edomata/backend/AggregateState$$Conflicted.html","n":"Conflicted","t":"case Conflicted[S, E, R](last: S, onEvent: EventMessage[E], errors: Type[R]) extends AggregateState[S, E, R]","d":"edomata/backend/AggregateState","k":"case"},
{"l":"edomata/backend/AggregateState$$Valid.html","n":"Valid","t":"case Valid[S](state: S, version: SeqNr) extends AggregateState[S, Nothing, Nothing]","d":"edomata/backend/AggregateState$$Valid","k":"case"},
{"l":"edomata/backend/AggregateState$$Conflicted.html","n":"Conflicted","t":"case Conflicted[S, E, R](last: S, onEvent: EventMessage[E], errors: Type[R]) extends AggregateState[S, E, R]","d":"edomata/backend/AggregateState$$Conflicted","k":"case"},
{"l":"edomata/backend/Backend.html","n":"Backend","t":"trait Backend[F[_], S, E, R, N]","d":"edomata/backend/Backend","k":"trait"},
{"l":"edomata/backend/Backend.html","n":"compile","t":"def compile[C](app: Edomaton[F, RequestContext[C, S], R, E, N, Unit]): (F, CommandMessage[C]) => R","d":"edomata/backend/Backend","k":"def"},
{"l":"edomata/backend/Backend.html","n":"journal","t":"val journal: JournalReader[F, E]","d":"edomata/backend/Backend","k":"val"},
{"l":"edomata/backend/Backend.html","n":"outbox","t":"val outbox: OutboxReader[F, N]","d":"edomata/backend/Backend","k":"val"},
{"l":"edomata/backend/Backend.html","n":"repository","t":"val repository: RepositoryReader[F, S, E, R]","d":"edomata/backend/Backend","k":"val"},
{"l":"edomata/backend/BackendCodec.html","n":"BackendCodec","t":"trait BackendCodec[T]","d":"edomata/backend/BackendCodec","k":"trait"},
{"l":"edomata/backend/BackendCodec.html","n":"codec","t":"def codec: Codec[T]","d":"edomata/backend/BackendCodec","k":"def"},
{"l":"edomata/backend/BackendCodec.html","n":"oid","t":"def oid: Type","d":"edomata/backend/BackendCodec","k":"def"},
{"l":"edomata/backend/BackendCodec$.html","n":"BackendCodec","t":"object BackendCodec","d":"edomata/backend/BackendCodec$","k":"object"},
{"l":"edomata/backend/BackendCodec$$Binary.html","n":"Binary","t":"class Binary[T](encode: T => Array[Byte], decode: Array[Byte] => Either[String, T]) extends BackendCodec[T]","d":"edomata/backend/BackendCodec$$Binary","k":"class"},
{"l":"edomata/backend/BackendCodec$$Binary.html","n":"codec","t":"def codec: Codec[T]","d":"edomata/backend/BackendCodec$$Binary","k":"def"},
{"l":"edomata/backend/BackendCodec$$Binary.html","n":"oid","t":"def oid: Type","d":"edomata/backend/BackendCodec$$Binary","k":"def"},
{"l":"edomata/backend/BackendCodec$$Json.html","n":"Json","t":"class Json[T](encode: T => String, decode: String => Either[String, T]) extends BackendCodec[T]","d":"edomata/backend/BackendCodec$$Json","k":"class"},
{"l":"edomata/backend/BackendCodec$$Json.html","n":"codec","t":"def codec: Codec[T]","d":"edomata/backend/BackendCodec$$Json","k":"def"},
{"l":"edomata/backend/BackendCodec$$Json.html","n":"oid","t":"def oid: Type","d":"edomata/backend/BackendCodec$$Json","k":"def"},
{"l":"edomata/backend/BackendCodec$$JsonB.html","n":"JsonB","t":"class JsonB[T](encode: T => String, decode: String => Either[String, T]) extends BackendCodec[T]","d":"edomata/backend/BackendCodec$$JsonB","k":"class"},
{"l":"edomata/backend/BackendCodec$$JsonB.html","n":"codec","t":"def codec: Codec[T]","d":"edomata/backend/BackendCodec$$JsonB","k":"def"},
{"l":"edomata/backend/BackendCodec$$JsonB.html","n":"oid","t":"def oid: Type","d":"edomata/backend/BackendCodec$$JsonB","k":"def"},
{"l":"edomata/backend/BackendError.html","n":"BackendError","t":"trait BackendError extends Throwable","d":"edomata/backend/BackendError","k":"trait"},
{"l":"edomata/backend/BackendError$.html","n":"BackendError","t":"object BackendError","d":"edomata/backend/BackendError$","k":"object"},
{"l":"edomata/backend/BackendError$$MaxRetryExceeded$.html","n":"MaxRetryExceeded","t":"object MaxRetryExceeded extends Throwable with BackendError","d":"edomata/backend/BackendError$$MaxRetryExceeded$","k":"object"},
{"l":"edomata/backend/BackendError$$PersistenceError.html","n":"PersistenceError","t":"class PersistenceError(msg: String) extends Throwable with BackendError","d":"edomata/backend/BackendError$$PersistenceError","k":"class"},
{"l":"edomata/backend/BackendError$$UnknownError.html","n":"UnknownError","t":"class UnknownError(underlying: Throwable) extends Throwable with BackendError","d":"edomata/backend/BackendError$$UnknownError","k":"class"},
{"l":"edomata/backend/BackendError$$VersionConflict$.html","n":"VersionConflict","t":"object VersionConflict extends Throwable with BackendError","d":"edomata/backend/BackendError$$VersionConflict$","k":"object"},
{"l":"edomata/backend/Cache.html","n":"Cache","t":"trait Cache[F[_], I, T]","d":"edomata/backend/Cache","k":"trait"},
{"l":"edomata/backend/Cache.html","n":"add","t":"def add(key: I, value: T): F[Option[(I, T)]]","d":"edomata/backend/Cache","k":"def"},
{"l":"edomata/backend/Cache.html","n":"get","t":"def get(key: I): F[Option[T]]","d":"edomata/backend/Cache","k":"def"},
{"l":"edomata/backend/Cache$.html","n":"Cache","t":"object Cache","d":"edomata/backend/Cache$","k":"object"},
{"l":"edomata/backend/Cache$.html","n":"lru","t":"def lru[F[_] : Async, Id, State](size: Int): F[Cache[F, Id, State]]","d":"edomata/backend/Cache$","k":"def"},
{"l":"edomata/backend/CachedRepository.html","n":"CachedRepository","t":"class CachedRepository[F[_], S, E, R, N](underlying: Repository[F, S, E, R, N], cmds: CommandStore[F], snapshot: SnapshotStore[F, S])(implicit evidence$1: Concurrent[F]) extends Repository[F, S, E, R, N]","d":"edomata/backend/CachedRepository","k":"class"},
{"l":"edomata/backend/CachedRepository.html","n":"append","t":"def append(ctx: RequestContext[_, _], version: SeqNr, newState: S, events: Type[E], notifications: Chain[N]): F[Unit]","d":"edomata/backend/CachedRepository","k":"def"},
{"l":"edomata/backend/CachedRepository.html","n":"load","t":"def load(cmd: CommandMessage[_]): F[CommandState[S, E, R]]","d":"edomata/backend/CachedRepository","k":"def"},
{"l":"edomata/backend/CachedRepository.html","n":"notify","t":"def notify(ctx: RequestContext[_, _], notifications: Type[N]): F[Unit]","d":"edomata/backend/CachedRepository","k":"def"},
{"l":"edomata/backend/CirceCodec$.html","n":"CirceCodec","t":"object CirceCodec","d":"edomata/backend/CirceCodec$","k":"object"},
{"l":"edomata/backend/CirceCodec$.html","n":"json","t":"def json[T : Decoder]: Json[T]","d":"edomata/backend/CirceCodec$","k":"def"},
{"l":"edomata/backend/CirceCodec$.html","n":"jsonb","t":"def jsonb[T : Decoder]: JsonB[T]","d":"edomata/backend/CirceCodec$","k":"def"},
{"l":"edomata/backend/CommandHandler$.html","n":"CommandHandler","t":"object CommandHandler","d":"edomata/backend/CommandHandler$","k":"object"},
{"l":"edomata/backend/CommandHandler$.html","n":"apply","t":"def apply[F[_] : Monad, C, S, E, R, N](repository: Repository[F, S, E, R, N], app: Edomaton[F, RequestContext[C, S], R, E, N, Unit])(implicit evidence$1: Monad[F], ModelTC[S, E, R]): (F, CommandMessage[C]) => R","d":"edomata/backend/CommandHandler$","k":"def"},
{"l":"edomata/backend/CommandState$.html","n":"CommandState","t":"object CommandState","d":"edomata/backend/CommandState$","k":"object"},
{"l":"edomata/backend/CommandState$$Redundant$.html","n":"Redundant","t":"object Redundant","d":"edomata/backend/CommandState$$Redundant$","k":"object"},
{"l":"edomata/backend/CommandStore.html","n":"CommandStore","t":"trait CommandStore[F[_]]","d":"edomata/backend/CommandStore","k":"trait"},
{"l":"edomata/backend/CommandStore.html","n":"append","t":"def append(cmd: CommandMessage[_]): F[Unit]","d":"edomata/backend/CommandStore","k":"def"},
{"l":"edomata/backend/CommandStore.html","n":"contains","t":"def contains(id: String): F[Boolean]","d":"edomata/backend/CommandStore","k":"def"},
{"l":"edomata/backend/CommandStore$.html","n":"CommandStore","t":"object CommandStore","d":"edomata/backend/CommandStore$","k":"object"},
{"l":"edomata/backend/CommandStore$.html","n":"inMem","t":"def inMem[F[_]](size: Int)(using F: Async[F]): F[CommandStore[F]]","d":"edomata/backend/CommandStore$","k":"def"},
{"l":"edomata/backend/EventMessage.html","n":"EventMessage","t":"class EventMessage[+T](metadata: EventMetadata, payload: T)","d":"edomata/backend/EventMessage","k":"class"},
{"l":"edomata/backend/EventMetadata.html","n":"EventMetadata","t":"class EventMetadata(id: UUID, time: OffsetDateTime, seqNr: SeqNr, version: EventVersion, stream: String)","d":"edomata/backend/EventMetadata","k":"class"},
{"l":"edomata/backend/JournalReader.html","n":"JournalReader","t":"trait JournalReader[F[_], E]","d":"edomata/backend/JournalReader","k":"trait"},
{"l":"edomata/backend/JournalReader.html","n":"notifications","t":"def notifications: Stream[F, StreamId]","d":"edomata/backend/JournalReader","k":"def"},
{"l":"edomata/backend/JournalReader.html","n":"readAll","t":"def readAll: Stream[F, EventMessage[E]]","d":"edomata/backend/JournalReader","k":"def"},
{"l":"edomata/backend/JournalReader.html","n":"readAllAfter","t":"def readAllAfter(seqNr: SeqNr): Stream[F, EventMessage[E]]","d":"edomata/backend/JournalReader","k":"def"},
{"l":"edomata/backend/JournalReader.html","n":"readStream","t":"def readStream(streamId: StreamId): Stream[F, EventMessage[E]]","d":"edomata/backend/JournalReader","k":"def"},
{"l":"edomata/backend/JournalReader.html","n":"readStreamAfter","t":"def readStreamAfter(streamId: StreamId, version: EventVersion): Stream[F, EventMessage[E]]","d":"edomata/backend/JournalReader","k":"def"},
{"l":"edomata/backend/JournalReader.html","n":"readStreamBefore","t":"def readStreamBefore(streamId: StreamId, version: EventVersion): Stream[F, EventMessage[E]]","d":"edomata/backend/JournalReader","k":"def"},
{"l":"edomata/backend/LRUCache$.html","n":"LRUCache","t":"object LRUCache","d":"edomata/backend/LRUCache$","k":"object"},
{"l":"edomata/backend/LRUCache$.html","n":"apply","t":"def apply[F[_] : Async, Id, State](size: Int): F[LRUCache[F, Id, State]]","d":"edomata/backend/LRUCache$","k":"def"},
{"l":"edomata/backend/LRUCache$$CacheItem.html","n":"CacheItem","t":"class CacheItem[I, T](key: I, var value: T, var prev: Option[CacheItem[I, T]], var next: Option[CacheItem[I, T]])","d":"edomata/backend/LRUCache$$CacheItem","k":"class"},
{"l":"edomata/backend/OutboxItem.html","n":"OutboxItem","t":"class OutboxItem[N](seqNr: SeqNr, time: OffsetDateTime, data: N, metadata: MessageMetadata)","d":"edomata/backend/OutboxItem","k":"class"},
{"l":"edomata/backend/OutboxReader.html","n":"OutboxReader","t":"trait OutboxReader[F[_], N]","d":"edomata/backend/OutboxReader","k":"trait"},
{"l":"edomata/backend/OutboxReader.html","n":"markAllAsSent","t":"def markAllAsSent(items: Type[OutboxItem[N]]): F[Unit]","d":"edomata/backend/OutboxReader","k":"def"},
{"l":"edomata/backend/OutboxReader.html","n":"markAsSent","t":"def markAsSent(item: OutboxItem[N], others: OutboxItem[N]*): F[Unit]","d":"edomata/backend/OutboxReader","k":"def"},
{"l":"edomata/backend/OutboxReader.html","n":"read","t":"def read: Stream[F, OutboxItem[N]]","d":"edomata/backend/OutboxReader","k":"def"},
{"l":"edomata/backend/PGNamespace$.html","n":"PGNamespace","t":"object PGNamespace","d":"edomata/backend/PGNamespace$","k":"object"},
{"l":"edomata/backend/PGNamespace$.html","n":"apply","t":"def apply(inline ns: String): PGNamespace","d":"edomata/backend/PGNamespace$","k":"def"},
{"l":"edomata/backend/PGNamespace$.html","n":"fromString","t":"def fromString(s: String): Either[String, PGNamespace]","d":"edomata/backend/PGNamespace$","k":"def"},
{"l":"edomata/backend/Repository.html","n":"Repository","t":"trait Repository[F[_], S, E, R, N]","d":"edomata/backend/Repository","k":"trait"},
{"l":"edomata/backend/Repository.html","n":"append","t":"def append(ctx: RequestContext[_, _], version: SeqNr, newState: S, events: Type[E], notifications: Chain[N]): F[Unit]","d":"edomata/backend/Repository","k":"def"},
{"l":"edomata/backend/Repository.html","n":"load","t":"def load(cmd: CommandMessage[_]): F[CommandState[S, E, R]]","d":"edomata/backend/Repository","k":"def"},
{"l":"edomata/backend/Repository.html","n":"notify","t":"def notify(ctx: RequestContext[_, _], notifications: Type[N]): F[Unit]","d":"edomata/backend/Repository","k":"def"},
{"l":"edomata/backend/RepositoryReader.html","n":"RepositoryReader","t":"trait RepositoryReader[F[_], S, E, R]","d":"edomata/backend/RepositoryReader","k":"trait"},
{"l":"edomata/backend/RepositoryReader.html","n":"get","t":"def get(streamId: StreamId): F[AggregateState[S, E, R]]","d":"edomata/backend/RepositoryReader","k":"def"},
{"l":"edomata/backend/RepositoryReader.html","n":"history","t":"def history(streamId: StreamId): Stream[F, AggregateState[S, E, R]]","d":"edomata/backend/RepositoryReader","k":"def"},
{"l":"edomata/backend/RepositoryReader$.html","n":"RepositoryReader","t":"object RepositoryReader","d":"edomata/backend/RepositoryReader$","k":"object"},
{"l":"edomata/backend/RepositoryReader$.html","n":"apply","t":"def apply[F[_], S, E, R](journal: JournalReader[F, E], snapshot: SnapshotReader[F, S])(using F: Concurrent[F], m: ModelTC[S, E, R]): RepositoryReader[F, S, E, R]","d":"edomata/backend/RepositoryReader$","k":"def"},
{"l":"edomata/backend/SkunkBackend$.html","n":"SkunkBackend","t":"object SkunkBackend","d":"edomata/backend/SkunkBackend$","k":"object"},
{"l":"edomata/backend/SkunkBackend$.html","n":"apply","t":"def apply[F[_] : Async](pool: Resource[F, Session[F]]): PartialBuilder[F]","d":"edomata/backend/SkunkBackend$","k":"def"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"DomainBuilder","t":"class DomainBuilder[F[_], C, S, E, R, N]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"class"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"build","t":"def build(using event: BackendCodec[E], notifs: BackendCodec[N]): Resource[F, Backend[F, S, E, R, N]]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"def"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"disableCache","t":"def disableCache: DomainBuilder[F, C, S, E, R, N]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"def"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"inMemSnapshot","t":"def inMemSnapshot(maxInMem: Int): DomainBuilder[F, C, S, E, R, N]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"def"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"persistedSnapshot","t":"def persistedSnapshot(maxInMem: Int, maxBuffer: Int, maxWait: FiniteDuration)(using codec: BackendCodec[S]): DomainBuilder[F, C, S, E, R, N]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"def"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"setup","t":"def setup(using event: BackendCodec[E], notifs: BackendCodec[N]): F[Unit]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"def"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"withRetryConfig","t":"def withRetryConfig(maxRetry: Int, retryInitialDelay: FiniteDuration): DomainBuilder[F, C, S, E, R, N]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"def"},
{"l":"edomata/backend/SkunkBackend$$DomainBuilder.html","n":"withSnapshot","t":"def withSnapshot(s: Resource[F, SnapshotStore[F, S]]): DomainBuilder[F, C, S, E, R, N]","d":"edomata/backend/SkunkBackend$$DomainBuilder","k":"def"},
{"l":"edomata/backend/SkunkBackend$$PartialBuilder.html","n":"PartialBuilder","t":"class PartialBuilder[F[_]](pool: Resource[F, Session[F]])(implicit evidence$2: Async[F])","d":"edomata/backend/SkunkBackend$$PartialBuilder","k":"class"},
{"l":"edomata/backend/SkunkBackend$$PartialBuilder.html","n":"builder","t":"def builder[C, S, E, R, N](domain: Domain[C, S, E, R, N], inline namespace: String)(using model: ModelTC[S, E, R]): DomainBuilder[F, C, S, E, R, N]","d":"edomata/backend/SkunkBackend$$PartialBuilder","k":"def"},
{"l":"edomata/backend/SnapshotPersistence.html","n":"SnapshotPersistence","t":"trait SnapshotPersistence[F[_], S]","d":"edomata/backend/SnapshotPersistence","k":"trait"},
{"l":"edomata/backend/SnapshotPersistence.html","n":"get","t":"def get(id: StreamId): F[Option[Valid[S]]]","d":"edomata/backend/SnapshotPersistence","k":"def"},
{"l":"edomata/backend/SnapshotPersistence.html","n":"put","t":"def put(items: Chunk[(S)]): F[Unit]","d":"edomata/backend/SnapshotPersistence","k":"def"},
{"l":"edomata/backend/SnapshotReader.html","n":"SnapshotReader","t":"trait SnapshotReader[F[_], S]","d":"edomata/backend/SnapshotReader","k":"trait"},
{"l":"edomata/backend/SnapshotReader.html","n":"get","t":"def get(id: StreamId): F[Option[Valid[S]]]","d":"edomata/backend/SnapshotReader","k":"def"},
{"l":"edomata/backend/SnapshotReader.html","n":"getFast","t":"def getFast(id: StreamId): F[Option[Valid[S]]]","d":"edomata/backend/SnapshotReader","k":"def"},
{"l":"edomata/backend/SnapshotStore.html","n":"SnapshotStore","t":"trait SnapshotStore[F[_], S] extends SnapshotReader[F, S]","d":"edomata/backend/SnapshotStore","k":"trait"},
{"l":"edomata/backend/SnapshotStore.html","n":"put","t":"def put(id: StreamId, state: Valid[S]): F[Unit]","d":"edomata/backend/SnapshotStore","k":"def"},
{"l":"edomata/backend/SnapshotStore$.html","n":"SnapshotStore","t":"object SnapshotStore","d":"edomata/backend/SnapshotStore$","k":"object"},
{"l":"edomata/backend/SnapshotStore$.html","n":"inMem","t":"def inMem[F[_] : Async, S](size: Int): F[SnapshotStore[F, S]]","d":"edomata/backend/SnapshotStore$","k":"def"},
{"l":"edomata/backend/SnapshotStore$.html","n":"persisted","t":"def persisted[F[_], S](store: SnapshotPersistence[F, S], size: Int, maxBuffer: Int, maxWait: FiniteDuration, flushOnExit: Boolean)(using F: Async[F]): Resource[F, SnapshotStore[F, S]]","d":"edomata/backend/SnapshotStore$","k":"def"},
{"l":"edomata/backend/UpickleCodec$.html","n":"UpickleCodec","t":"object UpickleCodec","d":"edomata/backend/UpickleCodec$","k":"object"},
{"l":"edomata/backend/UpickleCodec$.html","n":"json","t":"def json[T : Writer]: Json[T]","d":"edomata/backend/UpickleCodec$","k":"def"},
{"l":"edomata/backend/UpickleCodec$.html","n":"jsonb","t":"def jsonb[T : Writer]: JsonB[T]","d":"edomata/backend/UpickleCodec$","k":"def"},
{"l":"edomata/backend/UpickleCodec$.html","n":"msgpack","t":"def msgpack[T : Writer]: Binary[T]","d":"edomata/backend/UpickleCodec$","k":"def"},
{"l":"edomata/core.html","n":"edomata.core","t":"package edomata.core","d":"edomata/core","k":"package"},
{"l":"edomata/core.html","n":"D","t":"type D[R, E] = [T] =>> Decision[R, E, T]","d":"edomata/core","k":"type"},
{"l":"edomata/core.html","n":"DomainService","t":"type DomainService[F[_], C, R] = C => F[EitherNec[R, Unit]]","d":"edomata/core","k":"type"},
{"l":"edomata/core/Action.html","n":"Action","t":"class Action[F[_], R, E, N, A](run: F[Response[R, E, N, A]])","d":"edomata/core/Action","k":"class"},
{"l":"edomata/core/Action.html","n":"as","t":"def as[B](b: B)(using F: Functor[F]): Action[F, R, E, N, B]","d":"edomata/core/Action","k":"def"},
{"l":"edomata/core/Action.html","n":"flatMap","t":"def flatMap[R2 >: R, E2 >: E, N2 >: N, B](f: A => Action[F, R2, E2, N2, B])(using M: Monad[F]): Action[F, R2, E2, N2, B]","d":"edomata/core/Action","k":"def"},
{"l":"edomata/core/Action.html","n":"map","t":"def map[B](f: A => B)(using F: Functor[F]): Action[F, R, E, N, B]","d":"edomata/core/Action","k":"def"},
{"l":"edomata/core/Action.html","n":"publish","t":"def publish(ns: N*)(using F: Functor[F]): Action[F, R, E, N, A]","d":"edomata/core/Action","k":"def"},
{"l":"edomata/core/Action.html","n":"reset","t":"def reset(using F: Functor[F]): Action[F, R, E, N, A]","d":"edomata/core/Action","k":"def"},
{"l":"edomata/core/Action$.html","n":"Action","t":"object Action extends ActionConstructors with ActionCatsInstances","d":"edomata/core/Action$","k":"object"},
{"l":"edomata/core/ActionCatsInstances.html","n":"ActionCatsInstances","t":"trait ActionCatsInstances","d":"edomata/core/ActionCatsInstances","k":"trait"},
{"l":"edomata/core/ActionCatsInstances.html","n":"DT","t":"type DT[F[_], R, E, N] = [T] =>> Action[F, R, E, N, T]","d":"edomata/core/ActionCatsInstances","k":"type"},
{"l":"edomata/core/ActionCatsInstances.html","n":"given_Eq_Action","t":"given given_Eq_Action[F[_], R, E, N, A](using Eq[F[Response[R, E, N, A]]]): Eq[Action[F, R, E, N, A]]","d":"edomata/core/ActionCatsInstances","k":"given"},
{"l":"edomata/core/ActionCatsInstances.html","n":"given_Functor_DT","t":"given given_Functor_DT[F[_], R, E, N](using F: Functor[F]): given_Functor_DT[F, R, E, N]","d":"edomata/core/ActionCatsInstances","k":"given"},
{"l":"edomata/core/ActionCatsInstances.html","n":"given_Monad_DT","t":"given given_Monad_DT[F[_], R, E, N](using F: Monad[F]): given_Monad_DT[F, R, E, N]","d":"edomata/core/ActionCatsInstances","k":"given"},
{"l":"edomata/core/ActionConstructors.html","n":"ActionConstructors","t":"trait ActionConstructors","d":"edomata/core/ActionConstructors","k":"trait"},
{"l":"edomata/core/ActionConstructors.html","n":"accept","t":"def accept[F[_] : Applicative, R, E, N](ev: E, evs: E*): Action[F, R, E, N, Unit]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"lift","t":"def lift[F[_], R, E, N, T](t: Response[R, E, N, T])(using F: Applicative[F]): Action[F, R, E, N, T]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"liftD","t":"def liftD[F[_], R, E, N, T](t: Decision[R, E, T])(using F: Applicative[F]): Action[F, R, E, N, T]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"liftF","t":"def liftF[F[_], R, E, N, T](f: F[T])(using F: Functor[F]): Action[F, R, E, N, T]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"publish","t":"def publish[F[_] : Applicative, R, E, N](ns: N*): Action[F, R, E, N, Unit]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"pure","t":"def pure[F[_], R, E, N, T](t: T)(using F: Applicative[F]): Action[F, R, E, N, T]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"reject","t":"def reject[F[_] : Applicative, R, E, N, T](reason: R, otherReasons: R*): Action[F, R, E, N, T]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"validate","t":"def validate[F[_] : Applicative, R, E, N, T](validation: ValidatedNec[R, T]): Action[F, R, E, N, T]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/ActionConstructors.html","n":"void","t":"def void[F[_] : Applicative, R, E, N]: Action[F, R, E, N, Unit]","d":"edomata/core/ActionConstructors","k":"def"},
{"l":"edomata/core/CommandMessage.html","n":"CommandMessage","t":"class CommandMessage[+C](id: String, time: Instant, address: String, payload: C, metadata: MessageMetadata)","d":"edomata/core/CommandMessage","k":"class"},
{"l":"edomata/core/CommandMessage$.html","n":"CommandMessage","t":"object CommandMessage","d":"edomata/core/CommandMessage$","k":"object"},
{"l":"edomata/core/CommandMessage$.html","n":"apply","t":"def apply[C](id: String, time: Instant, address: String, payload: C): CommandMessage[C]","d":"edomata/core/CommandMessage$","k":"def"},
{"l":"edomata/core/CommandMessage$.html","n":"buildContext","t":"def buildContext[S, R](state: S): RequestContext[C, S]","d":"edomata/core/CommandMessage$","k":"def"},
{"l":"edomata/core/CommandMessage$.html","n":"deriveMeta","t":"def deriveMeta: MessageMetadata","d":"edomata/core/CommandMessage$","k":"def"},
{"l":"edomata/core/Decision.html","n":"Decision","t":"trait Decision[+R, +E, +A] extends Product with Serializable","d":"edomata/core/Decision","k":"trait"},
{"l":"edomata/core/Decision.html","n":"flatMap","t":"def flatMap[R2 >: R, E2 >: E, B](f: A => Decision[R2, E2, B]): Decision[R2, E2, B]","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision.html","n":"isAccepted","t":"def isAccepted: Boolean","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision.html","n":"isRejected","t":"def isRejected: Boolean","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision.html","n":"map","t":"def map[B](f: A => B): Decision[R, E, B]","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision.html","n":"toEither","t":"def toEither: EitherNec[R, A]","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision.html","n":"toOption","t":"def toOption: Option[A]","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision.html","n":"toValidated","t":"def toValidated: ValidatedNec[R, A]","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision.html","n":"visit","t":"def visit[B](fr: Type[R] => B, fa: A => B): B","d":"edomata/core/Decision","k":"def"},
{"l":"edomata/core/Decision$.html","n":"Decision","t":"object Decision extends DecisionConstructors with DecisionCatsInstances0","d":"edomata/core/Decision$","k":"object"},
{"l":"edomata/core/Decision$$Accepted.html","n":"Accepted","t":"class Accepted[E, T](events: Type[E], result: T) extends Decision[Nothing, E, T]","d":"edomata/core/Decision$$Accepted","k":"class"},
{"l":"edomata/core/Decision$$InDecisive.html","n":"InDecisive","t":"class InDecisive[T](result: T) extends Decision[Nothing, Nothing, T]","d":"edomata/core/Decision$$InDecisive","k":"class"},
{"l":"edomata/core/Decision$$Rejected.html","n":"Rejected","t":"class Rejected[R](reasons: Type[R]) extends Decision[R, Nothing, Nothing]","d":"edomata/core/Decision$$Rejected","k":"class"},
{"l":"edomata/core/DecisionCatsInstances0.html","n":"DecisionCatsInstances0","t":"trait DecisionCatsInstances0 extends DecisionCatsInstances1","d":"edomata/core/DecisionCatsInstances0","k":"trait"},
{"l":"edomata/core/DecisionCatsInstances0.html","n":"given_Eq_Decision","t":"given given_Eq_Decision[R, E, T]: Eq[Decision[R, E, T]]","d":"edomata/core/DecisionCatsInstances0","k":"given"},
{"l":"edomata/core/DecisionCatsInstances0.html","n":"given_MonadError_D_NonEmptyChain","t":"given given_MonadError_D_NonEmptyChain[R, E]: MonadError[D[R, E], Type[R]]","d":"edomata/core/DecisionCatsInstances0","k":"given"},
{"l":"edomata/core/DecisionCatsInstances1.html","n":"DecisionCatsInstances1","t":"trait DecisionCatsInstances1","d":"edomata/core/DecisionCatsInstances1","k":"trait"},
{"l":"edomata/core/DecisionCatsInstances1.html","n":"given_Traverse_D","t":"given given_Traverse_D[R, E]: Traverse[D[R, E]]","d":"edomata/core/DecisionCatsInstances1","k":"given"},
{"l":"edomata/core/DecisionConstructors.html","n":"DecisionConstructors","t":"trait DecisionConstructors","d":"edomata/core/DecisionConstructors","k":"trait"},
{"l":"edomata/core/DecisionConstructors.html","n":"accept","t":"def accept[R, E](ev: E, evs: E*): Decision[R, E, Unit]","d":"edomata/core/DecisionConstructors","k":"def"},
{"l":"edomata/core/DecisionConstructors.html","n":"acceptReturn","t":"def acceptReturn[R, E, T](t: T)(ev: E, evs: E*): Decision[R, E, T]","d":"edomata/core/DecisionConstructors","k":"def"},
{"l":"edomata/core/DecisionConstructors.html","n":"pure","t":"def pure[R, E, T](t: T): Decision[R, E, T]","d":"edomata/core/DecisionConstructors","k":"def"},
{"l":"edomata/core/DecisionConstructors.html","n":"reject","t":"def reject[R, E](reason: R, otherReasons: R*): Decision[R, E, Nothing]","d":"edomata/core/DecisionConstructors","k":"def"},
{"l":"edomata/core/DecisionConstructors.html","n":"unit","t":"def unit[R, E]: Decision[R, E, Unit]","d":"edomata/core/DecisionConstructors","k":"def"},
{"l":"edomata/core/DecisionConstructors.html","n":"validate","t":"def validate[R, E, T](validation: ValidatedNec[R, T]): Decision[R, E, T]","d":"edomata/core/DecisionConstructors","k":"def"},
{"l":"edomata/core/DecisionT.html","n":"DecisionT","t":"class DecisionT[F[_], R, E, A](run: F[Decision[R, E, A]])","d":"edomata/core/DecisionT","k":"class"},
{"l":"edomata/core/DecisionT.html","n":"as","t":"def as[B](b: B)(using F: Functor[F]): DecisionT[F, R, E, B]","d":"edomata/core/DecisionT","k":"def"},
{"l":"edomata/core/DecisionT.html","n":"flatMap","t":"def flatMap[R2 >: R, E2 >: E, B](f: A => DecisionT[F, R2, E2, B])(using M: Monad[F]): DecisionT[F, R2, E2, B]","d":"edomata/core/DecisionT","k":"def"},
{"l":"edomata/core/DecisionT.html","n":"map","t":"def map[B](f: A => B)(using F: Functor[F]): DecisionT[F, R, E, B]","d":"edomata/core/DecisionT","k":"def"},
{"l":"edomata/core/DecisionT$.html","n":"DecisionT","t":"object DecisionT extends DecisionTConstructors with DecisionTCatsInstances","d":"edomata/core/DecisionT$","k":"object"},
{"l":"edomata/core/DecisionT$.html","n":"Of","t":"type Of[F[_], R, E] = [t] =>> DecisionT[F, R, E, t]","d":"edomata/core/DecisionT$","k":"type"},
{"l":"edomata/core/DecisionTCatsInstances.html","n":"DecisionTCatsInstances","t":"trait DecisionTCatsInstances","d":"edomata/core/DecisionTCatsInstances","k":"trait"},
{"l":"edomata/core/DecisionTCatsInstances.html","n":"DT","t":"type DT[F[_], R, E] = [T] =>> DecisionT[F, R, E, T]","d":"edomata/core/DecisionTCatsInstances","k":"type"},
{"l":"edomata/core/DecisionTCatsInstances.html","n":"given_Eq_DecisionT","t":"given given_Eq_DecisionT[F[_], R, E, A](using Eq[F[Decision[R, E, A]]]): Eq[DecisionT[F, R, E, A]]","d":"edomata/core/DecisionTCatsInstances","k":"given"},
{"l":"edomata/core/DecisionTCatsInstances.html","n":"given_Functor_DT","t":"given given_Functor_DT[F[_], R, E](using F: Functor[F]): given_Functor_DT[F, R, E]","d":"edomata/core/DecisionTCatsInstances","k":"given"},
{"l":"edomata/core/DecisionTCatsInstances.html","n":"given_MonadError_DT_NonEmptyChain","t":"given given_MonadError_DT_NonEmptyChain[F[_], R, E](using F: Monad[F]): given_MonadError_DT_NonEmptyChain[F, R, E]","d":"edomata/core/DecisionTCatsInstances","k":"given"},
{"l":"edomata/core/DecisionTConstructors.html","n":"DecisionTConstructors","t":"trait DecisionTConstructors","d":"edomata/core/DecisionTConstructors","k":"trait"},
{"l":"edomata/core/DecisionTConstructors.html","n":"accept","t":"def accept[F[_] : Applicative, R, E](ev: E, evs: E*): DecisionT[F, R, E, Unit]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/DecisionTConstructors.html","n":"acceptReturn","t":"def acceptReturn[F[_] : Applicative, R, E, T](t: T)(ev: E, evs: E*): DecisionT[F, R, E, T]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/DecisionTConstructors.html","n":"lift","t":"def lift[F[_], R, E, T](t: Decision[R, E, T])(using F: Applicative[F]): DecisionT[F, R, E, T]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/DecisionTConstructors.html","n":"liftF","t":"def liftF[F[_], R, E, T](f: F[T])(using F: Functor[F]): DecisionT[F, R, E, T]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/DecisionTConstructors.html","n":"pure","t":"def pure[F[_], R, E, T](t: T)(using F: Applicative[F]): DecisionT[F, R, E, T]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/DecisionTConstructors.html","n":"reject","t":"def reject[F[_] : Applicative, R, E](reason: R, otherReasons: R*): DecisionT[F, R, E, Nothing]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/DecisionTConstructors.html","n":"validate","t":"def validate[F[_] : Applicative, R, E, T](validation: ValidatedNec[R, T]): DecisionT[F, R, E, T]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/DecisionTConstructors.html","n":"void","t":"def void[F[_] : Applicative, R, E]: DecisionT[F, R, E, Unit]","d":"edomata/core/DecisionTConstructors","k":"def"},
{"l":"edomata/core/Domain.html","n":"Domain","t":"class Domain[C, S, E, R, N](dummy: Boolean) extends AnyVal","d":"edomata/core/Domain","k":"class"},
{"l":"edomata/core/Domain.html","n":"dsl","t":"def dsl: DomainDSL[C, S, E, R, N]","d":"edomata/core/Domain","k":"def"},
{"l":"edomata/core/DomainCompiler$.html","n":"DomainCompiler","t":"object DomainCompiler","d":"edomata/core/DomainCompiler$","k":"object"},
{"l":"edomata/core/DomainCompiler$.html","n":"execute","t":"def execute[F[_] : Monad, C, S, E, R, N](app: Edomaton[F, RequestContext[C, S], R, E, N, Unit], ctx: RequestContext[C, S])(implicit evidence$1: Monad[F], m: ModelTC[S, E, R]): F[ProgramResult[S, E, R, N]]","d":"edomata/core/DomainCompiler$","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"DomainDSL","t":"class DomainDSL[C, S, E, R, N](dummy: Boolean) extends AnyVal","d":"edomata/core/DomainDSL","k":"class"},
{"l":"edomata/core/DomainDSL.html","n":"App","t":"type App[F[_], T] = Edomaton[F, RequestContext[C, S], R, E, N, T]","d":"edomata/core/DomainDSL","k":"type"},
{"l":"edomata/core/DomainDSL.html","n":"aggregateId","t":"def aggregateId[F[_] : Monad]: App[F, String]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"command","t":"def command[F[_] : Monad]: App[F, C]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"decide","t":"def decide[F[_] : Applicative, T](d: Decision[R, E, T]): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"eval","t":"def eval[F[_] : Applicative, T](f: F[T]): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"lift","t":"def lift[F[_] : Applicative, T](f: Response[R, E, N, T]): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"liftF","t":"def liftF[F[_], T](f: F[Response[R, E, N, T]]): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"messageId","t":"def messageId[F[_] : Monad]: App[F, String]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"metadata","t":"def metadata[F[_] : Monad]: App[F, MessageMetadata]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"publish","t":"def publish[F[_] : Applicative](ns: N*): App[F, Unit]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"pure","t":"def pure[F[_] : Monad, T](t: T): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"read","t":"def read[F[_] : Applicative]: App[F, RequestContext[C, S]]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"reject","t":"def reject[F[_] : Applicative, T](r: R, rs: R*): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"router","t":"def router[F[_] : Monad, T](f: C => App[F, T]): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"run","t":"def run[F[_] : Applicative, T](f: RequestContext[C, S] => F[T]): App[F, T]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"state","t":"def state[F[_] : Monad]: App[F, S]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainDSL.html","n":"unit","t":"def unit[F[_] : Monad]: App[F, Unit]","d":"edomata/core/DomainDSL","k":"def"},
{"l":"edomata/core/DomainModel.html","n":"DomainModel","t":"class DomainModel[State, Event, Rejection]","d":"edomata/core/DomainModel","k":"class"},
{"l":"edomata/core/DomainModel.html","n":"given_ModelTC_State_Event_Rejection","t":"given given_ModelTC_State_Event_Rejection: ModelTC[State, Event, Rejection]","d":"edomata/core/DomainModel","k":"given"},
{"l":"edomata/core/DomainModel.html","n":"initial","t":"def initial: State","d":"edomata/core/DomainModel","k":"def"},
{"l":"edomata/core/DomainModel.html","n":"transition","t":"def transition: Event => State => ValidatedNec[Rejection, State]","d":"edomata/core/DomainModel","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"Edomaton","t":"class Edomaton[F[_], -Env, R, E, N, A](run: Env => F[Response[R, E, N, A]])","d":"edomata/core/Edomaton","k":"class"},
{"l":"edomata/core/Edomaton.html","n":">>","t":"def >>[Env2 <: Env, B](f: => Edomaton[F, Env2, R, E, N, B])(using Monad[F]): Edomaton[F, Env2, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":">>=","t":"def >>=[Env2 <: Env, B](f: A => Edomaton[F, Env2, R, E, N, B])(using Monad[F]): Edomaton[F, Env2, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"andThen","t":"def andThen[Env2 <: Env, B](f: => Edomaton[F, Env2, R, E, N, B])(using Monad[F]): Edomaton[F, Env2, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"as","t":"def as[B](b: B)(using Functor[F]): Edomaton[F, Env, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"contramap","t":"def contramap[Env2](f: Env2 => Env): Edomaton[F, Env2, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"eval","t":"def eval[B](f: => F[B])(using Monad[F]): Edomaton[F, Env, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"evalMap","t":"def evalMap[B](f: A => F[B])(using Monad[F]): Edomaton[F, Env, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"evalTap","t":"def evalTap[B](f: A => F[B])(using Monad[F]): Edomaton[F, Env, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"flatMap","t":"def flatMap[Env2 <: Env, B](f: A => Edomaton[F, Env2, R, E, N, B])(using Monad[F]): Edomaton[F, Env2, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"map","t":"def map[B](f: A => B)(using Functor[F]): Edomaton[F, Env, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"mapK","t":"def mapK[G[_]](fk: FunctionK[F, G]): Edomaton[G, Env, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"publish","t":"def publish(ns: N*)(using Functor[F]): Edomaton[F, Env, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"publishOnRejection","t":"def publishOnRejection(ns: N*)(using Functor[F]): Edomaton[F, Env, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"publishOnRejectionWith","t":"def publishOnRejectionWith(f: Type[R] => Seq[N])(using Functor[F]): Edomaton[F, Env, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"reset","t":"def reset(using Functor[F]): Edomaton[F, Env, R, E, N, A]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton.html","n":"transform","t":"def transform[B](f: Response[R, E, N, A] => Response[R, E, N, B])(using Functor[F]): Edomaton[F, Env, R, E, N, B]","d":"edomata/core/Edomaton","k":"def"},
{"l":"edomata/core/Edomaton$.html","n":"Edomaton","t":"object Edomaton extends EdomatonInstances with EdomatonConstructors","d":"edomata/core/Edomaton$","k":"object"},
{"l":"edomata/core/EdomatonConstructors.html","n":"EdomatonConstructors","t":"trait EdomatonConstructors","d":"edomata/core/EdomatonConstructors","k":"trait"},
{"l":"edomata/core/EdomatonConstructors.html","n":"decide","t":"def decide[F[_] : Applicative, Env, R, E, N, T](d: Decision[R, E, T]): Edomaton[F, Env, R, E, N, T]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"eval","t":"def eval[F[_] : Applicative, Env, R, E, N, T](f: F[T]): Edomaton[F, Env, R, E, N, T]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"lift","t":"def lift[F[_] : Applicative, Env, R, E, N, T](f: Response[R, E, N, T]): Edomaton[F, Env, R, E, N, T]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"liftF","t":"def liftF[F[_], Env, R, E, N, T](f: F[Response[R, E, N, T]]): Edomaton[F, Env, R, E, N, T]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"publish","t":"def publish[F[_] : Applicative, Env, R, E, N](ns: N*): Edomaton[F, Env, R, E, N, Unit]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"pure","t":"def pure[F[_] : Monad, Env, R, E, N, T](t: T): Edomaton[F, Env, R, E, N, T]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"read","t":"def read[F[_] : Applicative, Env, R, E, N, T]: Edomaton[F, Env, R, E, N, Env]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"reject","t":"def reject[F[_] : Applicative, Env, R, E, N, T](r: R, rs: R*): Edomaton[F, Env, R, E, N, T]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"run","t":"def run[F[_] : Applicative, Env, R, E, N, T](f: Env => F[T]): Edomaton[F, Env, R, E, N, T]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonConstructors.html","n":"unit","t":"def unit[F[_] : Monad, Env, R, E, N, T]: Edomaton[F, Env, R, E, N, Unit]","d":"edomata/core/EdomatonConstructors","k":"def"},
{"l":"edomata/core/EdomatonInstances.html","n":"EdomatonInstances","t":"trait EdomatonInstances","d":"edomata/core/EdomatonInstances","k":"trait"},
{"l":"edomata/core/EdomatonInstances.html","n":"given_Contravariant_Edomaton","t":"given given_Contravariant_Edomaton[F[_], R, E, N, T]: Contravariant[[env] =>> Edomaton[F, env, R, E, N, T]]","d":"edomata/core/EdomatonInstances","k":"given"},
{"l":"edomata/core/EdomatonInstances.html","n":"given_Eq_Edomaton","t":"given given_Eq_Edomaton[F[_], Env, R, E, N, T](using Eq[Env => F[Response[R, E, N, T]]]): Eq[Edomaton[F, Env, R, E, N, T]]","d":"edomata/core/EdomatonInstances","k":"given"},
{"l":"edomata/core/EdomatonInstances.html","n":"given_Monad_Edomaton","t":"given given_Monad_Edomaton[F[_] : Monad, Env, R, E, N]: Monad[[t] =>> Edomaton[F, Env, R, E, N, t]]","d":"edomata/core/EdomatonInstances","k":"given"},
{"l":"edomata/core/MessageMetadata.html","n":"MessageMetadata","t":"class MessageMetadata(correlation: Option[String], causation: Option[String])","d":"edomata/core/MessageMetadata","k":"class"},
{"l":"edomata/core/MessageMetadata$.html","n":"MessageMetadata","t":"object MessageMetadata","d":"edomata/core/MessageMetadata$","k":"object"},
{"l":"edomata/core/MessageMetadata$.html","n":"apply","t":"def apply(id: String): MessageMetadata","d":"edomata/core/MessageMetadata$","k":"def"},
{"l":"edomata/core/MessageMetadata$.html","n":"apply","t":"def apply(correlation: String, causation: String): MessageMetadata","d":"edomata/core/MessageMetadata$","k":"def"},
{"l":"edomata/core/ModelTC.html","n":"ModelTC","t":"trait ModelTC[State, Event, Rejection]","d":"edomata/core/ModelTC","k":"trait"},
{"l":"edomata/core/ModelTC.html","n":"handle","t":"def handle[T](self: State, dec: Decision[Rejection, Event, T]): Decision[Rejection, Event, (State, T)]","d":"edomata/core/ModelTC","k":"def"},
{"l":"edomata/core/ModelTC.html","n":"initial","t":"def initial: State","d":"edomata/core/ModelTC","k":"def"},
{"l":"edomata/core/ModelTC.html","n":"perform","t":"def perform(self: State, dec: Decision[Rejection, Event, Unit]): Decision[Rejection, Event, State]","d":"edomata/core/ModelTC","k":"def"},
{"l":"edomata/core/ModelTC.html","n":"transition","t":"def transition: Event => State => ValidatedNec[Rejection, State]","d":"edomata/core/ModelTC","k":"def"},
{"l":"edomata/core/ProgramResult.html","n":"ProgramResult","t":"enum ProgramResult[S, E, R, N]","d":"edomata/core/ProgramResult","k":"enum"},
{"l":"edomata/core/ProgramResult$$Accepted.html","n":"Accepted","t":"case Accepted[S, E, R, N](newState: S, events: Type[E], notifications: Chain[N])","d":"edomata/core/ProgramResult","k":"case"},
{"l":"edomata/core/ProgramResult$$Indecisive.html","n":"Indecisive","t":"case Indecisive[S, E, R, N](notifications: Chain[N])","d":"edomata/core/ProgramResult","k":"case"},
{"l":"edomata/core/ProgramResult$$Rejected.html","n":"Rejected","t":"case Rejected[S, E, R, N](notifications: Chain[N], reasons: Type[R])","d":"edomata/core/ProgramResult","k":"case"},
{"l":"edomata/core/ProgramResult$$Conflicted.html","n":"Conflicted","t":"case Conflicted[S, E, R, N](reasons: Type[R])","d":"edomata/core/ProgramResult","k":"case"},
{"l":"edomata/core/ProgramResult$$Accepted.html","n":"Accepted","t":"case Accepted[S, E, R, N](newState: S, events: Type[E], notifications: Chain[N])","d":"edomata/core/ProgramResult$$Accepted","k":"case"},
{"l":"edomata/core/ProgramResult$$Indecisive.html","n":"Indecisive","t":"case Indecisive[S, E, R, N](notifications: Chain[N])","d":"edomata/core/ProgramResult$$Indecisive","k":"case"},
{"l":"edomata/core/ProgramResult$$Rejected.html","n":"Rejected","t":"case Rejected[S, E, R, N](notifications: Chain[N], reasons: Type[R])","d":"edomata/core/ProgramResult$$Rejected","k":"case"},
{"l":"edomata/core/ProgramResult$$Conflicted.html","n":"Conflicted","t":"case Conflicted[S, E, R, N](reasons: Type[R])","d":"edomata/core/ProgramResult$$Conflicted","k":"case"},
{"l":"edomata/core/RequestContext.html","n":"RequestContext","t":"class RequestContext[+C, +S](command: CommandMessage[C], state: S)","d":"edomata/core/RequestContext","k":"class"},
{"l":"edomata/core/Response.html","n":"Response","t":"class Response[+R, +E, +N, +A](result: Decision[R, E, A], notifications: Chain[N])","d":"edomata/core/Response","k":"class"},
{"l":"edomata/core/Response.html","n":">>","t":"def >>[R2 >: R, E2 >: E, N2 >: N, B](f: A => Response[R2, E2, N2, B]): Response[R2, E2, N2, B]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response.html","n":"as","t":"def as[B](b: B): Response[R, E, N, B]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response.html","n":"flatMap","t":"def flatMap[R2 >: R, E2 >: E, N2 >: N, B](f: A => Response[R2, E2, N2, B]): Response[R2, E2, N2, B]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response.html","n":"map","t":"def map[B](f: A => B): Response[R, E, N, B]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response.html","n":"publish","t":"def publish[N2 >: N](ns: N2*): Response[R, E, N2, A]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response.html","n":"publishOnRejection","t":"def publishOnRejection[N2 >: N](ns: N2*): Response[R, E, N2, A]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response.html","n":"publishOnRejectionWith","t":"def publishOnRejectionWith[N2 >: N](f: Type[R] => Seq[N2]): Response[R, E, N2, A]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response.html","n":"reset","t":"def reset: Response[R, E, N, A]","d":"edomata/core/Response","k":"def"},
{"l":"edomata/core/Response$.html","n":"Response","t":"object Response extends ResponseConstructors with ResponseCatsInstances0","d":"edomata/core/Response$","k":"object"},
{"l":"edomata/core/ResponseCatsInstances0.html","n":"ResponseCatsInstances0","t":"trait ResponseCatsInstances0 extends ResponseCatsInstances1","d":"edomata/core/ResponseCatsInstances0","k":"trait"},
{"l":"edomata/core/ResponseCatsInstances0.html","n":"given_Eq_Response","t":"given given_Eq_Response[R, E, N, T]: Eq[Response[R, E, N, T]]","d":"edomata/core/ResponseCatsInstances0","k":"given"},
{"l":"edomata/core/ResponseCatsInstances0.html","n":"given_Monad_Response","t":"given given_Monad_Response[R, E, N]: Monad[[t] =>> Response[R, E, N, t]]","d":"edomata/core/ResponseCatsInstances0","k":"given"},
{"l":"edomata/core/ResponseCatsInstances1.html","n":"ResponseCatsInstances1","t":"trait ResponseCatsInstances1","d":"edomata/core/ResponseCatsInstances1","k":"trait"},
{"l":"edomata/core/ResponseCatsInstances1.html","n":"given_Traverse_Response","t":"given given_Traverse_Response[R, E, N]: Traverse[[t] =>> Response[R, E, N, t]]","d":"edomata/core/ResponseCatsInstances1","k":"given"},
{"l":"edomata/core/ResponseConstructors.html","n":"ResponseConstructors","t":"trait ResponseConstructors","d":"edomata/core/ResponseConstructors","k":"trait"},
{"l":"edomata/core/ResponseConstructors.html","n":"accept","t":"def accept[R, E, N](ev: E, evs: E*): Response[R, E, N, Unit]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/core/ResponseConstructors.html","n":"acceptReturn","t":"def acceptReturn[R, E, N, T](t: T)(ev: E, evs: E*): Response[R, E, N, T]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/core/ResponseConstructors.html","n":"lift","t":"def lift[R, E, N, T](d: Decision[R, E, T]): Response[R, E, N, T]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/core/ResponseConstructors.html","n":"publish","t":"def publish[R, E, N](n: N*): Response[R, E, N, Unit]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/core/ResponseConstructors.html","n":"pure","t":"def pure[R, E, N, T](t: T): Response[R, E, N, T]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/core/ResponseConstructors.html","n":"reject","t":"def reject[R, E, N](reason: R, otherReasons: R*): Response[R, E, N, Nothing]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/core/ResponseConstructors.html","n":"unit","t":"def unit[R, E, N]: Response[R, E, N, Unit]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/core/ResponseConstructors.html","n":"validate","t":"def validate[R, E, N, T](validation: ValidatedNec[R, T]): Response[R, E, N, T]","d":"edomata/core/ResponseConstructors","k":"def"},
{"l":"edomata/examples/nr1.html","n":"edomata.examples.nr1","t":"package edomata.examples.nr1","d":"edomata/examples/nr1","k":"package"},
{"l":"edomata/examples/nr1/Application$.html","n":"Application","t":"object Application extends Simple","d":"edomata/examples/nr1/Application$","k":"object"},
{"l":"edomata/examples/nr1/Application$.html","n":"CounterDomain","t":"val CounterDomain: Domain[String, Counter, Event, Rejection, Updates]","d":"edomata/examples/nr1/Application$","k":"val"},
{"l":"edomata/examples/nr1/Application$.html","n":"app","t":"def app: Edomaton[IO, RequestContext[String, Counter], Rejection, Event, Updates, Unit]","d":"edomata/examples/nr1/Application$","k":"def"},
{"l":"edomata/examples/nr1/Application$.html","n":"application","t":"val application: IO[Unit]","d":"edomata/examples/nr1/Application$","k":"val"},
{"l":"edomata/examples/nr1/Application$.html","n":"backendRes","t":"def backendRes(pool: Resource[IO, Session[IO]]): Resource[IO, Backend[IO, Counter, Event, Rejection, Updates]]","d":"edomata/examples/nr1/Application$","k":"def"},
{"l":"edomata/examples/nr1/Application$.html","n":"database","t":"val database: Resource[IO, Resource[IO, Session[IO]]]","d":"edomata/examples/nr1/Application$","k":"val"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_BackendCodec_Event","t":"given given_BackendCodec_Event: BackendCodec[Event]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_BackendCodec_Updates","t":"given given_BackendCodec_Updates: BackendCodec[Updates]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_ReadWriter_Closed","t":"given given_ReadWriter_Closed: ReadWriter[Closed]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_ReadWriter_Closed_type","t":"given given_ReadWriter_Closed_type: ReadWriter[Event]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_ReadWriter_Event","t":"given given_ReadWriter_Event: ReadWriter[Event]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_ReadWriter_Opened_type","t":"given given_ReadWriter_Opened_type: ReadWriter[Event]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_ReadWriter_Received","t":"given given_ReadWriter_Received: ReadWriter[Received]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_ReadWriter_Updated","t":"given given_ReadWriter_Updated: ReadWriter[Updated]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"given_ReadWriter_Updates","t":"given given_ReadWriter_Updates: ReadWriter[Updates]","d":"edomata/examples/nr1/Application$","k":"given"},
{"l":"edomata/examples/nr1/Application$.html","n":"ns","t":"val ns: Decision[Rejection, Event, Counter]","d":"edomata/examples/nr1/Application$","k":"val"},
{"l":"edomata/examples/nr1/Application$.html","n":"run","t":"def run: IO[Unit]","d":"edomata/examples/nr1/Application$","k":"def"},
{"l":"edomata/examples/nr1/Counter.html","n":"Counter","t":"enum Counter","d":"edomata/examples/nr1/Counter","k":"enum"},
{"l":"edomata/examples/nr1/Counter$$Open.html","n":"Open","t":"case Open(i: Int)","d":"edomata/examples/nr1/Counter","k":"case"},
{"l":"edomata/examples/nr1/Counter.html","n":"Empty","t":"case Empty extends Counter","d":"edomata/examples/nr1/Counter","k":"case"},
{"l":"edomata/examples/nr1/Counter.html","n":"Closed","t":"case Closed extends Counter","d":"edomata/examples/nr1/Counter","k":"case"},
{"l":"edomata/examples/nr1/Counter$$Open.html","n":"Open","t":"case Open(i: Int)","d":"edomata/examples/nr1/Counter$$Open","k":"case"},
{"l":"edomata/examples/nr1/Counter$.html","n":"Counter","t":"object Counter extends DomainModel[Counter, Event, Rejection]","d":"edomata/examples/nr1/Counter$","k":"object"},
{"l":"edomata/examples/nr1/Counter$.html","n":"initial","t":"def initial: Counter","d":"edomata/examples/nr1/Counter$","k":"def"},
{"l":"edomata/examples/nr1/Counter$.html","n":"transition","t":"def transition: Event => Counter => ValidatedNec[Rejection, Counter]","d":"edomata/examples/nr1/Counter$","k":"def"},
{"l":"edomata/examples/nr1/Event.html","n":"Event","t":"enum Event","d":"edomata/examples/nr1/Event","k":"enum"},
{"l":"edomata/examples/nr1/Event$$Received.html","n":"Received","t":"case Received(i: Int)","d":"edomata/examples/nr1/Event","k":"case"},
{"l":"edomata/examples/nr1/Event.html","n":"Opened","t":"case Opened extends Event","d":"edomata/examples/nr1/Event","k":"case"},
{"l":"edomata/examples/nr1/Event.html","n":"Closed","t":"case Closed extends Event","d":"edomata/examples/nr1/Event","k":"case"},
{"l":"edomata/examples/nr1/Event$$Received.html","n":"Received","t":"case Received(i: Int)","d":"edomata/examples/nr1/Event$$Received","k":"case"},
{"l":"edomata/examples/nr1/Rejection.html","n":"Rejection","t":"enum Rejection","d":"edomata/examples/nr1/Rejection","k":"enum"},
{"l":"edomata/examples/nr1/Rejection.html","n":"Unknown","t":"case Unknown extends Rejection","d":"edomata/examples/nr1/Rejection","k":"case"},
{"l":"edomata/examples/nr1/Updates.html","n":"Updates","t":"enum Updates","d":"edomata/examples/nr1/Updates","k":"enum"},
{"l":"edomata/examples/nr1/Updates$$Updated.html","n":"Updated","t":"case Updated()","d":"edomata/examples/nr1/Updates","k":"case"},
{"l":"edomata/examples/nr1/Updates$$Closed.html","n":"Closed","t":"case Closed()","d":"edomata/examples/nr1/Updates","k":"case"},
{"l":"edomata/examples/nr1/Updates$$Updated.html","n":"Updated","t":"case Updated()","d":"edomata/examples/nr1/Updates$$Updated","k":"case"},
{"l":"edomata/examples/nr1/Updates$$Closed.html","n":"Closed","t":"case Closed()","d":"edomata/examples/nr1/Updates$$Closed","k":"case"},
{"l":"edomata/syntax.html","n":"edomata.syntax","t":"package edomata.syntax","d":"edomata/syntax","k":"package"},
{"l":"edomata/syntax/AllSyntax.html","n":"AllSyntax","t":"trait AllSyntax extends ModelSyntax with ValidatedSyntax with EdomatonSyntax with DomainSyntax","d":"edomata/syntax/AllSyntax","k":"trait"},
{"l":"edomata/syntax/all$.html","n":"all","t":"object all extends AllSyntax","d":"edomata/syntax/all$","k":"object"},
{"l":"ir/hnaderi/mdocPlantuml.html","n":"ir.hnaderi.mdocPlantuml","t":"package ir.hnaderi.mdocPlantuml","d":"ir/hnaderi/mdocPlantuml","k":"package"},
{"l":"ir/hnaderi/mdocPlantuml/PlantumlModifier.html","n":"PlantumlModifier","t":"class PlantumlModifier extends StringModifier","d":"ir/hnaderi/mdocPlantuml/PlantumlModifier","k":"class"},
{"l":"ir/hnaderi/mdocPlantuml/PlantumlModifier.html","n":"name","t":"val name: String","d":"ir/hnaderi/mdocPlantuml/PlantumlModifier","k":"val"},
{"l":"ir/hnaderi/mdocPlantuml/PlantumlModifier.html","n":"process","t":"def process(info: String, code: Input, reporter: Reporter): String","d":"ir/hnaderi/mdocPlantuml/PlantumlModifier","k":"def"},
{"l":"docs/index.html","n":"docs","t":"docs","d":"","k":"static"}];