# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Continuous Integration

on:
  pull_request:
    branches: ['**', '!update/**', '!pr/**']
  push:
    branches: ['**', '!update/**', '!pr/**']
    tags: [v*]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest]
        scala: [3]
        java: [temurin@8, temurin@17]
        project: [rootJS, rootJVM, rootNative]
        exclude:
          - project: rootJS
            java: temurin@17
          - project: rootNative
            java: temurin@17
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Install sbt
        if: contains(runner.os, 'macos')
        run: brew install sbt

      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: sbt update
        if: matrix.java == 'temurin@8' && steps.setup-java-temurin-8.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: Install Nix
        uses: cachix/install-nix-action@v17

      - name: Start up Postgres
        run: docker-compose up -d

      - name: Check that workflows are up to date
        run: 'nix develop .#${{ matrix.java }} -c sbt githubWorkflowCheck'

      - name: Check headers and formatting
        if: matrix.java == 'temurin@8' && matrix.os == 'ubuntu-latest'
        run: 'nix develop .#${{ matrix.java }} -c sbt ''project ${{ matrix.project }}'' ''++ ${{ matrix.scala }}'' headerCheckAll scalafmtCheckAll ''project /'' scalafmtSbtCheck'

      - name: scalaJSLink
        if: matrix.project == 'rootJS'
        run: 'nix develop .#${{ matrix.java }} -c sbt ''project ${{ matrix.project }}'' ''++ ${{ matrix.scala }}'' Test/scalaJSLinkerResult'

      - name: nativeLink
        if: matrix.project == 'rootNative'
        run: 'nix develop .#${{ matrix.java }} -c sbt ''project ${{ matrix.project }}'' ''++ ${{ matrix.scala }}'' Test/nativeLink'

      - name: Test
        run: 'nix develop .#${{ matrix.java }} -c sbt ''project ${{ matrix.project }}'' ''++ ${{ matrix.scala }}'' test'

      - name: Check binary compatibility
        if: matrix.java == 'temurin@8' && matrix.os == 'ubuntu-latest'
        run: 'nix develop .#${{ matrix.java }} -c sbt ''project ${{ matrix.project }}'' ''++ ${{ matrix.scala }}'' mimaReportBinaryIssues'

      - name: Generate API documentation
        if: matrix.java == 'temurin@8' && matrix.os == 'ubuntu-latest'
        run: 'nix develop .#${{ matrix.java }} -c sbt ''project ${{ matrix.project }}'' ''++ ${{ matrix.scala }}'' doc'

      - name: Make target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: mkdir -p modules/skunk-upickle/.native/target modules/backend/.native/target modules/munit/.js/target modules/skunk-upickle/.js/target modules/skunk-circe/.jvm/target modules/postgres/.js/target modules/skunk/.native/target unidocs/target modules/skunk-circe/.native/target modules/core/.native/target modules/backend/.jvm/target modules/skunk/.jvm/target modules/skunk-jsoniter/.native/target modules/skunk-jsoniter/.jvm/target modules/postgres/.jvm/target modules/core/.js/target modules/skunk-circe/.js/target modules/doobie/.jvm/target modules/postgres/.native/target modules/doobie-circe/.jvm/target modules/core/.jvm/target modules/doobie-jsoniter/.jvm/target modules/skunk-jsoniter/.js/target modules/doobie-upickle/.jvm/target modules/skunk-upickle/.jvm/target modules/skunk/.js/target modules/munit/.jvm/target modules/backend/.js/target modules/munit/.native/target project/target

      - name: Compress target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: tar cf targets.tar modules/skunk-upickle/.native/target modules/backend/.native/target modules/munit/.js/target modules/skunk-upickle/.js/target modules/skunk-circe/.jvm/target modules/postgres/.js/target modules/skunk/.native/target unidocs/target modules/skunk-circe/.native/target modules/core/.native/target modules/backend/.jvm/target modules/skunk/.jvm/target modules/skunk-jsoniter/.native/target modules/skunk-jsoniter/.jvm/target modules/postgres/.jvm/target modules/core/.js/target modules/skunk-circe/.js/target modules/doobie/.jvm/target modules/postgres/.native/target modules/doobie-circe/.jvm/target modules/core/.jvm/target modules/doobie-jsoniter/.jvm/target modules/skunk-jsoniter/.js/target modules/doobie-upickle/.jvm/target modules/skunk-upickle/.jvm/target modules/skunk/.js/target modules/munit/.jvm/target modules/backend/.js/target modules/munit/.native/target project/target

      - name: Upload target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-${{ matrix.scala }}-${{ matrix.project }}
          path: targets.tar

  publish:
    name: Publish Artifacts
    needs: [build]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [temurin@8]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install sbt
        if: contains(runner.os, 'macos')
        run: brew install sbt

      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: sbt update
        if: matrix.java == 'temurin@8' && steps.setup-java-temurin-8.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: Install Nix
        uses: cachix/install-nix-action@v17

      - name: Download target directories (3, rootJS)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-rootJS

      - name: Inflate target directories (3, rootJS)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (3, rootJVM)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-rootJVM

      - name: Inflate target directories (3, rootJVM)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (3, rootNative)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-rootNative

      - name: Inflate target directories (3, rootNative)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Import signing key
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE == ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: echo $PGP_SECRET | base64 -d -i - | gpg --import

      - name: Import signing key and strip passphrase
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
          echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
          (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

      - name: Publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_CREDENTIAL_HOST: ${{ secrets.SONATYPE_CREDENTIAL_HOST }}
        run: 'nix develop .#${{ matrix.java }} -c sbt tlCiRelease'

  dependency-submission:
    name: Submit Dependencies
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [temurin@8]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install sbt
        if: contains(runner.os, 'macos')
        run: brew install sbt

      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: sbt update
        if: matrix.java == 'temurin@8' && steps.setup-java-temurin-8.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: Install Nix
        uses: cachix/install-nix-action@v17

      - name: Submit Dependencies
        uses: scalacenter/sbt-dependency-submission@v2
        with:
          modules-ignore: edomata_3 docs_3 examples_sjs1_3 edomata_3 edomata_3 examples_3 edomata-backend-tests_sjs1_3 edomata-backend-tests_3 edomata-backend-tests_native0.4_3 mdocplantuml_3
          configs-ignore: test scala-tool scala-doc-tool test-internal

  post-build:
    name: post build
    needs: [build]
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: post build
        run: echo success!

  site:
    name: Generate Site
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [temurin@17]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install sbt
        if: contains(runner.os, 'macos')
        run: brew install sbt

      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: sbt update
        if: matrix.java == 'temurin@8' && steps.setup-java-temurin-8.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: 'nix develop .#${{ matrix.java }} -c sbt +update'

      - name: Install Nix
        uses: cachix/install-nix-action@v17

      - name: Generate site
        run: 'nix develop .#${{ matrix.java }} -c sbt docs/tlSite'

      - name: Publish site
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site/target/docs/site
          keep_files: true
